                                YACUT v2.0 manual

This file describes the usage of the yacut C testing framework.
It is just a single C header, just include it and compile.
The macro YCT_VERSION_MAJOR() is and ALWAYS will be present. This is the
standard way to detect yaCut (and its version, see also YCT_VERSION_MINOR()).
It is heavily based on preprocessor macros, see examples to get started with
code. All macros start with YCT_. If your editor is smart enough just type
"YCT_" and it should offer you ALL available macros.
yaCut support some input parameter (see next section).
Next section describes the macro you can define BEFORE including yaCut.
You can ignore them unless you have compilation errors. Disabling some feature
is useful to reduce executable size (see faq).
Then follows a list of all available macros (excluding the *_MSG version).


-----------------------------------------------------------------------------


SECTION: Parameters
These macros can be defined BEFORE including yacut. They might be able to
support some compiler errors.

YCT_OPT_DISABLE_LOG
Defining this macro remove log support. If you don't need log, you can have
smaller executable.

YCT_OPT_DISABLE_TIMING
Defining this macro remove time measurement support and display on dumps.

YCT_OPT_ENABLE_PARALLEL
Define this macro to enable parallel tests execution.
See section "Parallel" below.

YCT_OPT_DISABLE_WCHAR
This macro makes yaCut ignore <wchar.h> header. This means that you
can still compare wchar_t variables, but yaCut will report them as "???".
Use this macro for very old compilers that don't have support for <wchar.h>

YCT_OPT_JAILHOUSE
Enable jailhouse mode. Define this macro when using yaCut with jailhouse.
May be useful to set the YCT_OPT_DISABLE_TIMING macro.
If your environment allows file writing, you should redefine the
YCT_OPT_F[W]PRINTF macros instead of using the YCT_OPT_JAILHOUSE macro.

YCT_OPT_FPRINTF
yaCut normally uses fprintf for ansi output. You can define this macro to
instruct yaCut to use your own function (that must have the same prototype).

YCT_OPT_FWPRINTF
yaCut normally uses fwprintf for unicode output. You can define this macro to
instruct yaCut to use your own function (that must have the same prototype).

YCT_FUNC_NAME
This is not a real parameter. This is the macro (if defined so) that the
compilers offer to retrieve the current function name. It is needed by yaCut,
so if compilation fails due to this macro, you can redefine it. yaCut tries to
guess it, and usually succeeds. If it fails, you can help it by defining it
with the value your compiler assign to the current function name.
Ex.: #define YCT_FUNC_NAME __MY_COMPILER_FUNC_NAME__
The worst case is to define it to a constant ("unknown") to allow compilation.


-----------------------------------------------------------------------------


SECTION: General

YCT_GET_NAME();
Returns a string literal representing the name of the library.

YCT_VERSION_MAJOR();
Returns an integer representing the major version of the library.
Present in ALL versions of yaCut, use this macro to detect yaCut presence.

YCT_VERSION_MINOR();
Returns an integer representing the minor version of the library.

YCT_VERSION_RELEASE
An integer representing the release version of the library.

YCT_SET_OUTPUT(handle);
Set the output handle. The default is stdout. You can pass your FILE* variable.
This macro is to be used in a main context. If you want to change the output
handle inside another context (test/suite), you have to access the internal
yaCut context (see how assertions write).
Handle must be already opened and writable. It won't be closed.

YCT_GET_RETURN_VALUE(status);
Give a status number according to current context.
The integer variable status will be 0 if all ok, 1 if some warning, or 2 on
assertions failure. It is recommended to use YCT_STATUS_OK, YCT_STATUS_WARNING
and YCT_STATUS_FAILED macros instead of numbers.

YCT_LAST_FAILED();
Return non-zero if last test/suite fails, zero otherwise. It is updated at the
end of every test/suite.

YCT_DUMP_SHORT();
Print something like "all ok" or "some warning" or "some failure".

YCT_DUMP();
Print a quite detailed summary of execution. Typically used as last directive
before YCT_END.


-----------------------------------------------------------------------------


SECTION: Main


YCT_BEGIN(name);
Start a new context named name. It will be showed when YCT_DUMP is called.
If you pass a null or empty string to the macro, no name is written.
This macro is mandatory unless you use YCT_MAIN. Context must be closed by a
call to YCT_END macro. To be used inside a function.
Note that you can declare as many YCT_BEGIN/YCT_END contexts as you want,
even more than one inside the same function!


YCT_END();
Close the current test context started by YCT_BEGIN.

YCT_TEST(test) { ... }
Define a test. Put your assertions here (See assertions section).
No return value is allowed. To be used in global scope.

YCT_TEST_RUN(test);
Run the test test. To be used in YCT_BEGIN/YCT_END context.

YCT_MAIN(test_or_suite)
This macro defines a custom main so you must not write your own. The parameter
must be a defined test or suite to be run. No semicolon follows.
Note that a single entry test/suite is not a limit (see YCT_BEGIN notes).

YCT_SET_PARAMETER(arg);
This macro sets a parameter that will be visible to current context and all
inherited contexts until overwritten by another call to this macro.
Please note that setup/teardown functions won't have access to the parameter
because they are of the form void f(void).
The parameter arg must be a pointer.

YCT_PARAMETER
The current parameter, default is NULL.


-----------------------------------------------------------------------------


SECTION: Suites
Suites have a central role in xUnit architecture. A suite is just a collection
of tests that can share the same environment. This is done by setting two
functions in the YCT_SUITE macro. This will ensure (or better gives you the
opportunity) to execute all tests in the same environment (see xUnit
documentation). Note that f_setup/f_teardown may be useful at suite level too.
Almost all C and even C++ test framework do not support directly this feature.
And so does yaCut. Anyway you can easily have this just calling a user defined
function at the beginning of the suite and another at the end of the suite.
See code example ex_suite.c

YCT_SUITE(suite, f_setup, f_teardown) { ... }
Define the suite suite. f_setup and f_teardown are functions that take no
parameter and return void. If f_setup is not NULL, it is called BEFORE each
test added in the current suite. If f_teardown is not NULL, it is called AFTER
each test added in the current suite. Suite context must be closed with
the YCT_SUITE_END macro, no return value is allowed. To be used in global
scope.

YCT_SUITE_END
Close the suite opened by YCT_SUITE. Note that no parentheses and/or semicolon
follow. This macro must be put after the YCT_SUITE block.

YCT_TEST_ADD(test);
Add test test to current suite. To be used inside YCT_SUITE context.

YCT_SUITE_RUN(suite);
Run the suite suite. To be used inside YCT_BEGIN/YCT_END context.


-----------------------------------------------------------------------------


SECTION: Skip
This section explains available ways to skip tests/suites.
You will notice that you can skip a test/suite prepending "DISABLE_" to
tests/suite declarations, without touching anything inside YCT_BEGIN/YCT_END
context. On the other side, leaving standard declarations, you can prepend
"NO_" to YCT_TEST_ADD/YCT_TEST_RUN/YCT_SUITE_RUN inside YCT_BEGIN/YCT_END
or YCY_SUITE context. The 3rd way is to call YCT_DISABLE to skip all
following tests/suites and possibly restore standard behaviour by calling
YCT_ENABLE.
See code example ex_skip.c

DISABLE_YCT_TEST(test);
The defined test will not execute, when inside a suite or when explicitly
called by YCT_TEST_RUN macro.

DISABLE_YCT_SUITE(suite, f_setup, f_teardown);
The defined suite will not execute when called by YCT_SUITE_RUN macro.

NO_YCT_TEST_RUN(test)
The passed test will NOT execute. The test can be declared normally or
with the now redundant DISABLE_YCT_TEST macro. It is simply ignored.

NO_YCT_TEST_ADD(test)
The passed test won't run in the suite.

NO_YCT_SUITE_RUN(suite)
The passed suite will NOT execute. The suite can be declared normally or
with the now redundant DISABLE_YCT_SUITE macro. It is simply ignored.

YCT_DISABLE();
All following warnings, assertions, tests and suites will NOT execute.
Use YCT_ENABLE to restore normal behaviour.
Note that YCT_MESSAGE is always available.

YCT_ENABLE();
Stop skipping warning, assertions, tests, suites. Restore normal behaviour.
Typical usage is after some disabled tests by a call to YCT_DISABLE.

YCT_IS_ENABLED();
Returns 1 if enabled (default), 0 if not (tests are not running).


-----------------------------------------------------------------------------


SECTION: Blocking mode
The blocking mode allows to set the behaviour to follow when a test fails.
The default mode is to execute all tests, even when some fails.
With YCT_SET_BLOCKED you can stop execution when an assertion fails.
With YCT_SET_FULL_BLOCKED execution stops when a warning is issued too.
The locking mode is isolated to current context (YCT_BEGIN/YCT_END block).
If you have multiple YCT_BEGIN/YCT_END blocks and one get locked, you have
to stop others manually. (if !YCT_IS_LOCKED() ...).
See code example ex_block.c

YCT_SET_BLOCKED();
Assertions failure will block the execution of all future tests and suites of
current context. Useful when you want to stop at the first failure.

YCT_SET_FULL_BLOCKED();
Same as YCT_SET_BLOCKED, but even warnings failure cause the context to lock.
You can tune the failure policy balancing warnings and assertions.

YCT_DISABLE_BLOCKING();
Restore original blocking behaviour: Tests are executed even if some previous
fail.
ATTENTION: This call has NO EFFECT if context is already locked!

YCT_IS_LOCKED();
Returns non-zero if the current context is locked (a failure occurred and some
blocking mode was set). Otherwise returns 0.


-----------------------------------------------------------------------------


SECTION: Log
The logging facility of yaCut is quite simple, but is very useful for example
when the test app crashes and you don't know where. Enabling log just means that
BEFORE a test/assertions is performed, its file, line and test code are printed
with a "LOG" prefix. Note that these macros can be safely left in the code even
if the macro YCT_OPT_DISABLE_LOG is set, they are simply ignored.
See code example ex_skip.c

YCT_ENABLE_LOG();
Enable logging. Next assertions will print their positions and tested code
BEFORE the test if evaluated.

YCT_DISABLE_LOG();
Disable logging, No logging info is printed. This is the default.

YCT_IS_LOG_ENABLED();
Returns NON-ZERO if the current context has logging enabled.
Otherwise returns 0.


-----------------------------------------------------------------------------


SECTION: Timing
The timing feature of yaCut just prints the (CPU) time of execution.
It is enabled by default.
See code example ex_block.c

YCT_DISABLE_TIMING();
Disable time recording, execution time is not printed by YCT_DUMP macro.

-- Extra Features

If you compile with YCT_OPT_DISABLE_TIMING, compilation will go ok, but
YCT_TIMER will be defined as int and your compiler will probably warn about
unused variable. YCT_GET_TIME macro requires a float variable to store
elapsed seconds. You can define the timer and the float var in a ifdef block
(as shown in file ex_paral.c) to remove unused warning, leaving all other code
unchanged.

YCT_TIMER
Macro that declares a timer. Use it to declare a timer. See following macros.

YCT_START_TIMER(t)
Start timer t previously declared with YCT_TIMER. A timer can be started
multiple times, but will invalidate previous timer activations if any.

YCT_STOP_TIMER(t)
Stop timer t, typically activated by YCT_START_TIMER.

YCT_GET_TIME(t, f)
Put elapsed time stored in timer t in the float variable f. Variable f will
contain the elapsed time in seconds.


-----------------------------------------------------------------------------


SECTION: Parallel
The parallel feature of yaCut allows the execution of multiple tests (or code)
in parallel. Please note that tests should not write shared data. In this case
yaCut provide the YCT_SYNCHRONIZED macro explained later.
The number of tests really executed in parallel is equal to the physical
number of cores available to the application.
It relies on the OpenMP framework and it is disabled by default.
To skip parallel tests, you must use the "DISABLE_" prefix in tests declaration.
Standard suites do not support parallel tests directly. Inside a suite, you can
add tests that call another yaCut context in which you declare parallel tests.
To get parallel tests execution, define YCT_OPT_ENABLE_PARALLEL before including
yaCut and remember to compile/link with OpenMP support.
Please note that even if your fprintf implementation is thread-safe, yaCut
messages may be printed in pseudo random order, since each report is the result
of several calls to fprintf. Finally consider that ALL parallel directives end
WITHOUT semicolon.
See code example ex_paral.c

YCT_PARALLEL() { ... }
Define a parallel tests context. All tests added with YCT_PARALLEL_TEST() or
other code inside YCT_GO macro will run in parallel.
Can be used out of yaCut context (with YCT_GO macro).

Since yaCut must use OpenMP macros in its macros, things get a little bit
complicated. We have to declare 4 macros for each parallel test to execute
in exact order. These macros have dummy name, they just replace code.
The simplest way to explain them is through an example.
All macros of this section are used in example file ex_paral.c

-- Extra Features

YCT_GO()
Declare a block of code that will run in parallel with all other YCT_GO blocks
declared inside a YCT_PARALLEL() block.
Can be used out of yaCut context (inside YCT_PARALLEL macro).

YCT_SYNCHRONIZED()
Declare a block of code that will run sequentially, one thread at time. This
is a synchronization directives. Can be used anywhere in your code.

YCT_ATOMIC()
Allow simple operations (increments/decrements, may be other) to be performed
atomically. The advantage is that is much more efficient than the
YCT_SYNCHRONIZED macro.
N.B.: Refer to your OpenMP specification to check what operations you can do
with this macro.  

YCT_BARRIER()
Make all threads wait to barrier until ALL threads reach it.


-----------------------------------------------------------------------------


SECTION: Assertions
Assertions are the basic entities to test software. In this section are listed
all assertions you can use. Except YCT_MESSAGE and YCT_FAIL that already have
it, all assertions have a second version that additionally write a custom
message. Just append '_MSG' to their original name and append the message as
last parameter. The message can be a string literal or a char*. UTF-8 strings
are accepted but wchar_t* strings or literals do not work. See YCT_ASSERT_MSG
below as example.
Assertions are typically used inside YCT_TEST block. However you can use them
inside a YCT_SUITE scope too. They can also be used in YCT_BEGIN context if it
resides inside a function that returns void. YCT_MESSAGE doesn't have this
limitation and can be used in any YCT context.

YCT_MESSAGE(message);
Write message on output stream.

YCT_WARNING(condition);
Issue a warning if condition is false (zero).

YCT_FAIL(message);
Abort current test and writes message.

YCT_ASSERT(condition);
Abort current test if condition fails (zero).

YCT_ASSERT_MSG(condition, message);
Abort current test and write message if condition fails. All assertions below
have the_MSG version too, like this. Just add _MSG to macro name and add the
message as last parameter. Must be a string, char* or literal.

YCT_ASSERT_ZERO(condition);
Abort current test if condition doesn't return 0.

YCT_ASSERT_ONE(condition);
Abort current test if condition doesn't return 1.

YCT_ASSERT_TRUE(condition);
See YCT_ASSERT_ONE.

YCT_ASSERT_FALSE(condition);
See YCT_ASSERT_ZERO.

YCT_ASSERT_EQUAL(expected, actual);
Abort current test if expected != actual. Do NOT use with strings, arrays,
objects/structs. Technically this assertion can be used with pointers since they
are elementary types, but keep in mind that this will compare pointers only,
NOT the pointed data!

YCT_ASSERT_NOT_EQUAL(expected, actual);
Abort current test if expected == actual. See notes above.

YCT_ASSERT_NULL(ptr);
Abort current test if ptr is not NULL.

YCT_ASSERT_NOT_NULL(ptr);
Abort current test if ptr is NULL.

YCT_ASSERT_EQUAL_STR(expected_str, actual_str);
Abort current test if string expected_str and actual_str are different.
char and wchar_t array/pointers are typically expected as arguments.

YCT_ASSERT_NOT_EQUAL_STR(str1, str2);
Abort current test if string str1 and str2 are equal.
char and wchar_t array/pointers and/or string literals are typically expected
as arguments.

YCT_ASSERT_EQUAL_ARRAY(expected_array1, expected_array2, len);
Abort current test if arrays expected_array1 and expected_array2 have at least
a different element in range [0, len].

YCT_ASSERT_NOT_EQUAL_ARRAY(array1, array2, len);
Abort current test if arrays array1 and array2 have all elements equal in range
[0, len].

YCT_ASSERT_EQUAL_OBJ(expected_obj, actual_obj, fcmp);
Abort current test if expected_obj and actual_obj are different. fcmp is the
function used to compare passed objects. The fcmp prototype must be:
int fcmp(const T* pObj1, const T* pObj2);
where T is the type of BOTH objects. fcmp must return 0 if equal.
Note that constant pointers are preferred, but just T* can be passed.

YCT_ASSERT_NOT_EQUAL_OBJ(obj1, obj2, fcmp);
Abort current test if obj1 and obj2 are equal. See notes above.

YCT_ASSERT_EQUAL_FLOAT(expected_float, actual_float, tolerance);
Abort current test if abs(expected_float - actual_float) > tolerance.
Numbers a and b are considered equal if their difference is less or equal than
tolerance. Typical usage is with float and double.

YCT_ASSERT_NOT_EQUAL_FLOAT(a, b, tolerance);
Abort current test if abs(a - b) <= tolerance.


-----------------------------------------------------------------------------


Michele Pes -- mp81ss@rambler.ru
Happy testing!

P.S.:
This is dedicated to Paperotta
